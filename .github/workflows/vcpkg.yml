---
name: üéÅ Packge with vcpkg
on:
  push:
    branches:
      - master
      - release-**
      - vcpkg-generic
  pull_request:
  release:
    types: ['prereleased', 'released']


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'windows-2019'
            triplet: 'x64-windows'
            mono: ''
            build-type: 'Release'
            vcpkg-root: 'C:'
            pathconvert: 'cygpath -u'

# Fails for libpq
#          - os: 'windows-2019'
#            triplet: 'x64-uwp'
#            mono: ''
#            build-type: 'Release'
#            vcpkg-root: 'C:'

          - os: 'ubuntu-20.04'
            triplet: 'x64-linux'
            # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
            mono: 'mono'
            build-type: 'Release'
            vcpkg-root: '/home/runner'
            overlay: 'vcpkg/overlay_system_qt'
            install_qt: true
            qt_target: 'desktop'
            qt_arch: ''
            pathconvert: 'echo'

          - os: 'macos-10.15'
            triplet: 'x64-osx'
            # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
            mono: 'mono'
            build-type: 'Release'
            vcpkg-root: '/Users/runner'
            pathconvert: 'echo'

# Fails for qtkeychain
          - os: 'macos-10.15'
            triplet: 'arm64-ios'
            # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
            mono: 'mono'
            build-type: 'Release'
            vcpkg-root: '/Users/runner'
            overlay: 'vcpkg/overlay_system_qt'
            install_qt: true
            qt_target: 'ios'
            qt_arch: 'ios'
            pathconvert: 'echo'

# Fails for qtkeychain
          - os: 'ubuntu-20.04'
            triplet: 'arm64-android'
            # To run `nuget.exe` on non-Windows platforms, we must use `mono`.
            mono: 'mono'
            build-type: 'Release'
            vcpkg-root: '/home/runner'
            overlay: 'vcpkg/overlay_system_qt'
            install_qt: true
            qt_target: 'android'
            qt_arch: 'android'
            pathconvert: 'echo'


    env:
      TX_TOKEN: ${{ secrets.TX_TOKEN }}
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      VCPKG_ROOT: ${{ matrix.vcpkg-root }}/src
      CMAKE_BUILD_DIR: ${{ matrix.vcpkg-root}}/builddir
      VCPKG_DEFAULT_BINARY_CACHE: ${{ matrix.vcpkg-root }}/vcpkg_cache

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Clone vcpkg
        shell: bash
        run: |
          VCPKG_SHA=$(head -1 .git/modules/vcpkg/HEAD)
          mkdir "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          mkdir "${{ env.VCPKG_ROOT }}"
          cd "${{ env.VCPKG_ROOT }}"
          git init
          git remote add origin https://github.com/microsoft/vcpkg.git
          git fetch --depth 1 origin $VCPKG_SHA
          git checkout FETCH_HEAD

      - name: Cache vcpkg
        id: cache-vcpkg-tool
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: |
            ${{ env.VCPKG_ROOT }}/vcpkg
            ${{ env.VCPKG_ROOT }}/vcpkg.exe
          key: ${{ runner.os }}-${{ hashFiles('.git/modules/vcpkg/HEAD') }}-x

      - name: Bootstrap vcpkg
        if: steps.cache-vcpkg-tool.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ env.VCPKG_ROOT }}
        run: |
          if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null ; then
            ./bootstrap-vcpkg.bat
          else
            ./bootstrap-vcpkg.sh
          fi

      - name: Setup NuGet Credentials
        shell: bash
        run: |
          ${{ matrix.mono }} $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget | tail -n 1) \
          sources add \
          -source "https://nuget.pkg.github.com/opengisch/index.json" \
          -storepasswordincleartext \
          -name "GitHub" \
          -username "opengisch" \
          -password "${{ secrets.GITHUB_TOKEN }}"

          ${{ matrix.mono }} $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget | tail -n 1) \
          setapikey ${{ secrets.GITHUB_TOKEN }} -src "https://nuget.pkg.github.com/opengisch/index.json"

      - uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.os == 'windows-2019' }}

#      - name: Setup tmate session
#        if: ${{ matrix.triplet == 'x64-linux' }}
#        uses: mxschmitt/action-tmate@v3

      - name: Free additional space
        if: ${{ matrix.triplet == 'x64-linux' }}
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet/sdk
          sudo rm -rf /usr/share/rust
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/lib/android
          sudo apt remove llvm-* ghc-* google-chrome-* dotnet-sdk-* azure-cli google-cloud-sdk google-chrome-stable firefox
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          du -a /usr/share | sort -n -r | head -n 10
          du -a /usr/local/share | sort -n -r | head -n 10
          df -h
          sudo apt clean
          df -h

      - name: Install Qt
        if: ${{ matrix.install_qt }}
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.14.2
          modules: 'qtcharts'
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}

      - name: Prepare linux build env
        if: ${{ matrix.triplet == 'x64-linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gperf autopoint '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
          sudo apt-get remove -y libopenexr-dev # Avoid gdal picking this system lib up
          echo "CMAKE_EXTRA_CXX_STANDARD_LIBRARIES=${Qt5_DIR}/lib/libQt5DBus.so /home/runner/builddir/vcpkg_installed/x64-linux/lib/libglib-2.0.a /home/runner/builddir/vcpkg_installed/x64-linux/lib/libpgcommon.a /home/runner/builddir/vcpkg_installed/x64-linux/lib/libpgport.a /home/runner/builddir/vcpkg_installed/x64-linux/lib/libwebp.a" >> $GITHUB_ENV

      - name: Prepare osx build env
        if: ${{ matrix.triplet == 'x64-osx' }}
        run: |
          brew install automake bison flex
          echo $(brew --prefix bison)/bin >> $GITHUB_PATH
          echo $(brew --prefix flex)/bin >> $GITHUB_PATH
          echo "CMAKE_EXTRA_CXX_STANDARD_LIBRARIES=-lldap" >> $GITHUB_ENV
          sudo xcode-select -s /Applications/Xcode_12.app/Contents/Developer

      - name: Install dependencies and generate project files
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          # Convert paths to bash compatible ones. Thanks to whoever decided to use drive letters and backslashes.
          CMAKE_BUILD_DIR=$( ${{ matrix.pathconvert }} "${CMAKE_BUILD_DIR}" )
          VCPKG_ROOT=$( ${{ matrix.pathconvert }} "${VCPKG_ROOT}" )
          SOURCE_DIR=$( ${{ matrix.pathconvert }} "${WORKSPACE}" )

          overlay_ports=(${WORKSPACE}/${{ matrix.overlay }} ${WORKSPACE}/vcpkg/overlay)
          echo "Building with $(IFS=\; ; echo "${overlay_ports[*]}")"
          cmake -S "${SOURCE_DIR}" -B "${CMAKE_BUILD_DIR}" -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_OVERLAY_PORTS=$(IFS=\; ; echo "${overlay_ports[*]}") -DVCPKG_TARGET_TRIPLET="${{ matrix.triplet }}" -DWITH_VCPKG=ON -DUSE_MAC_BUNDLING=OFF

      - name: Upload lxml2
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: xml2-config-${{ matrix.triplet }}
          path: ${{ env.VCPKG_ROOT }}/buildtrees/libxml2

      - name: Print log
        if: failure()
        run: |
          cat ${{ env.VCPKG_ROOT }}/buildtrees/libxml2/**/config.h

#      - name: Setup tmate session
#        if: always()
#        uses: mxschmitt/action-tmate@v3
#        with:
#          limit-access-to-actor: true

      - name: Upload Build Logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: build-logs-${{ matrix.triplet }}
          path: ${{ env.VCPKG_ROOT }}/buildtrees/**/*.log

            #      - name: Setup tmate session
            #        if: always()
            #        uses: mxschmitt/action-tmate@v3

      - name: üåç Pull Translations
        shell: bash
        run: |
          if [[ -z "${TX_TOKEN}" ]]; then
            echo "TX_TOKEN not set, skip tx pull"
          else
            pip3 install transifex-client
            pushd "${{ env.VCPKG_ROOT }}"
            ./vcpkg integrate install
            popd
            ./scripts/ci/pull_translations.sh
          fi

      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}"

      # - name: Test
      #  run: |
      #    cd "${{ env.CMAKE_BUILD_DIR }}"
      #    ctest -V

      - uses: actions/upload-artifact@v2
        with:
          name: "QField-dev-${{ matrix.triplet }}-${{ matrix.build-type }}"
          path: "${{ env.CMAKE_BUILD_DIR }}/output"

#      - name: Show space after build
#        if: always()
#        run: |
#          Get-PSDrive
